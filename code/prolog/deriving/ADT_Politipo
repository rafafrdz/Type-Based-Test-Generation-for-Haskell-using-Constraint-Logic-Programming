tycon t1 t2 ... tk -> _tycon ## predicado
constrs  := constr1 | constr2 | ... | constrn -> _tycon(C1) | _tycon(C2) | _tycon(Cn)

constr1 := con1 atype11 ... atype1k1 -> C1 := _con1(X11, ..., X1k1) :- pred11(X11), ..., pred1k1(X1k1)
constr2 := con2 atype21 ... atype2k2 -> C2 := _con2(X21, ..., X2k2) :- pred21(X21), ..., pred2k2(X2k2)
...
constrn := conn atypen1 ... atypenkn -> Cn := _conn(Xn1, ..., Xnkn) :- predn1(Xn1), ..., prednkn(Xnkn)


 =>

data simpletype         =   constr1 | constr2 | ... | constrn

data tycon t1 t2 ... tk =   constr1 | constr2 | ... | constrn

data tycon t1 t2 ... tk =   con1 atype11 ... atype1k1   |
                            con2 atype21 ... atype2k2   |
                            ...                         |
                            conn atypen1 ... atypenkn


    _tycon(T1, T2, ..., TK, _con1(X11, ..., X1k1)) :- pred11(T1, T2, ..., TK, X11), ..., pred1k1(T1, T2, ..., TK, X1k1)
    _tycon(T1, T2, ..., TK, _con2(X21, ..., X2k2)) :- pred21(T1, T2, ..., TK, X21), ..., pred2k2(T1, T2, ..., TK, X2k2)
    ...
    _tycon(T1, T2, ..., TK, _conn(Xn1, ..., Xnkn)) :- predn1(T1, T2, ..., TK, Xn1), ..., prednkn(T1, T2, ..., TK, Xnkn)

if Xij <- a => predij := types:gen(Tij, Rij)



